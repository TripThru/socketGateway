var moment = require('moment');
var tripsModel = require('./model/trips');
var Promise = require('bluebird');

function ActiveTrips() {
  this.activeTripsById = {};
  this.tripRemovalSpan = moment.duration(5, 'minutes');
  this.dashboardTripsByIdByStatus = {
      queued: {},
      dispatched: {},
      enroute: {},
      pickedup: {},
      complete: {},
      cancelled: {},
      rejected: {}
  };
  this.dashboardTripsByIdByStatus['new'] = {};
  this.maxDashboardTrips = 150;
  this.bookingWebsiteTripTag = 'web'; // Used to identify trips generated by demo website to ensure they show up on dashboard
}

ActiveTrips.prototype.add = function(trip) {
  if(this.activeTripsById.hasOwnProperty(trip.id)) {
    return Promise.reject(new Error('Trip ' + trip.id + ' already exists'));
  }
  this.activeTripsById[trip.id] = trip;
  this.addDashboardTrip(trip);
  tripsModel.add(trip);
  return Promise.resolve();
};

ActiveTrips.prototype.update = function(trip) { 
  if(!this.activeTripsById.hasOwnProperty(trip.id)) {
    return Promse.reject(new Error('Trip ' + trip.id + ' does not exist'));
  }
  this.activeTripsById[trip.id] = trip;
  this.updateDashboardTrip(trip);
  tripsModel.update(trip);
  if(isNonActiveStatus(trip.status)) {
    this.deactivate(trip);
  }
  return Promise.resolve();
};

ActiveTrips.prototype.deactivate = function(trip) {
  var self = this;
  setTimeout(function(){
    var t = self.activeTripsById[trip.id];
    if(t && isNonActiveStatus(t.status)) {
      delete self.activeTripsById[trip.id];
      self.deleteDashboardTrip(trip);
    }
  }, this.tripRemovalSpan.asMilliseconds());
};

ActiveTrips.prototype.getById = function(id) {
  return Promise.resolve(this.activeTripsById[id]);
  /*
   * var t = this.activeTripsById[trip.id]
   * return t ? Promise.resolve(t) : tripsModel.getById(trip.id);
   */
};


// Dashboard utility functions -- start

ActiveTrips.prototype.getDashboardTripListByStatus = function(status) {
  return this.dashboardTripsByIdByStatus[status];
};

ActiveTrips.prototype.addDashboardTrip = function(trip) {
  var triplist = this.getDashboardTripListByStatus(trip.status);
  if(triplist && Object.keys(triplist).length < this.maxDashboardTrips && 
        !triplist.hasOwnProperty(trip.id)) {
    triplist[trip.id] = trip;
  }
};

ActiveTrips.prototype.updateDashboardTrip = function(trip) {
  this.deleteDashboardTripFromPreviousLists(trip);
  this.addDashboardTrip(trip);
};

ActiveTrips.prototype.deleteDashboardTripFromPreviousLists = function(trip) {
  for(var id in this.dashboardTripsByIdByStatus){
    delete this.dashboardTripsByIdByStatus[id][trip.id];
  }
};

ActiveTrips.prototype.deleteDashboardTrip = function(trip) {
  var triplist = this.getDashboardTripListByStatus(trip.status);
  if(triplist && triplist.hasOwnProperty(trip.id)) {
    delete triplist[trip.id];
  }
};

function pushTrips(partnerId, triplist, tripsToPush) {
  for(var id in tripsToPush) {
    var trip = tripsToPush[id];
    if( trip &&
        !partnerId || 
        partnerId === 'all' || 
        trip.originatingPartner.id === partnerId || 
        (trip.servicingPartner && trip.servicingPartner.id === partnerId)) {
      
      triplist.push(trip);
    }
  }
  return triplist;
}

// Smaller list used by the website dashboard
ActiveTrips.prototype.getDashboardTrips = function(partnerId, status) {
  var trips = [];
  if(status === 'new' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus['new']);
  }
  if(status === 'queued' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.queued);
  }
  if(status === 'dispatched' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.dispatched);
  }
  if(status === 'enroute' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.enroute);
  }
  if(status === 'pickedup' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.pickedup);
  }
  if(status === 'complete' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.complete);
  }
  if(status === 'cancelled' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.cancelled);
  }
  if(status === 'rejected' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.rejected);
  }
  return trips;
};

ActiveTrips.prototype.getAllDashboardTrips = function(partnerId) {
  var trips = {};
  if(!partnerId || partnerId === 'all') {
    trips = this.activeTripsById;
  } else {
    for(var id in this.activeTripsById) {
      var trip = this.activeTripsById[id];
      if( trip && 
          trip.originatingPartner.id === partnerId || 
          (trip.servicingPartner && trip.servicingPartner.id === partnerId)) {
        trips[id] = trip;
      }
    }
  }
  return trips;
};

// Dashboard utility functions -- end

var isNonActiveStatus = function(status) {
  return status === 'complete' || status === 'rejected' || status === 'cancelled';
};

module.exports = new ActiveTrips();