var moment = require('moment');
var tripsModel = require('./model/trips');
var Promise = require('bluebird');
var RedisClient = require("./store/redis_client");

function ActiveTrips() {
  this.tripRemovalSpan = moment.duration(5, 'minutes');
  this.dashboardTripsByIdByStatus = {
      queued: {},
      dispatched: {},
      enroute: {},
      pickedup: {},
      complete: {},
      cancelled: {},
      rejected: {}
  };
  this.dashboardTripsByIdByStatus['new'] = {};
  this.maxDashboardTrips = 150;
  this.bookingWebsiteTripTag = 'web'; // Used to identify trips generated by demo website to ensure they show up on dashboard
  this.redisClient = new RedisClient('trips');
}

ActiveTrips.prototype.add = function(trip) {
  return tripsModel
    .add(trip)
    .bind(this)
    .then(function(result){
      this.addDashboardTrip(trip);
      trip.dbId = result.dbId;
      return this.redisClient.add(trip.id, trip);
    });
};

ActiveTrips.prototype.update = function(trip) { 
  return this
    .redisClient
    .update(trip.id, trip)
    .bind(this)
    .then(function(reply){
      this.updateDashboardTrip(trip);
      tripsModel.update(trip);
      if(isNonActiveStatus(trip.status)) {
        this.deactivate(trip);
      }
    });
};

ActiveTrips.prototype.deactivate = function(trip) {
  setTimeout(function(){
    this.redisClient.del(trip.id);
  }.bind(this), this.tripRemovalSpan.asMilliseconds());
};

ActiveTrips.prototype.getById = function(id) {
  return this
    .redisClient
    .get(id)
    .then(function(trip){
      if(trip) {
        trip = toApiTrip(trip);
      }
      return trip;
    });
};

ActiveTrips.prototype.clear = function() {
  this.redisClient.clear();
};


// Dashboard utility functions -- start

ActiveTrips.prototype.getDashboardTripListByStatus = function(status) {
  return this.dashboardTripsByIdByStatus[status];
};

ActiveTrips.prototype.addDashboardTrip = function(trip) {
  var triplist = this.getDashboardTripListByStatus(trip.status);
  if(triplist && Object.keys(triplist).length < this.maxDashboardTrips && 
        !triplist.hasOwnProperty(trip.id)) {
    triplist[trip.id] = trip;
  }
};

ActiveTrips.prototype.updateDashboardTrip = function(trip) {
  this.deleteDashboardTripFromPreviousLists(trip);
  this.addDashboardTrip(trip);
};

ActiveTrips.prototype.deleteDashboardTripFromPreviousLists = function(trip) {
  for(var id in this.dashboardTripsByIdByStatus){
    delete this.dashboardTripsByIdByStatus[id][trip.id];
  }
};

ActiveTrips.prototype.deleteDashboardTrip = function(trip) {
  var triplist = this.getDashboardTripListByStatus(trip.status);
  if(triplist && triplist.hasOwnProperty(trip.id)) {
    delete triplist[trip.id];
  }
};

function pushTrips(partnerId, triplist, tripsToPush) {
  for(var id in tripsToPush) {
    var trip = tripsToPush[id];
    if( trip &&
        !partnerId || 
        partnerId === 'all' || 
        trip.originatingPartner.id === partnerId || 
        (trip.servicingPartner && trip.servicingPartner.id === partnerId)) {
      
      triplist.push(trip);
    }
  }
  return triplist;
}

// Smaller list used by the website dashboard
ActiveTrips.prototype.getDashboardTrips = function(partnerId, status) {
  var trips = [];
  if(status === 'new' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus['new']);
  }
  if(status === 'queued' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.queued);
  }
  if(status === 'dispatched' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.dispatched);
  }
  if(status === 'enroute' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.enroute);
  }
  if(status === 'pickedup' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.pickedup);
  }
  if(status === 'complete' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.complete);
  }
  if(status === 'cancelled' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.cancelled);
  }
  if(status === 'rejected' || status === 'all') {
    pushTrips(partnerId, trips, this.dashboardTripsByIdByStatus.rejected);
  }
  return trips;
};

ActiveTrips.prototype.getAll = function(partnerId) {
  // No need to call toApiTrip on results for now since this is only used by
  // dashboard stats which doesn't use date properties
  return this
    .redisClient
    .getAll()
    .then(function(allTrips){
      if(!partnerId || partnerId === 'all') {
        return allTrips;
      } else {
        var trips = [];
        for(var i = 0; i < allTrips.length; i++) {
          var trip = allTrips[i];
          if( trip && 
              trip.originatingPartner.id === partnerId || 
              (trip.servicingPartner && trip.servicingPartner.id === partnerId)) {
            trips.push(trip);
          }
        }
        return trips;
      }
    });
};

// Dashboard utility functions -- end

var isNonActiveStatus = function(status) {
  return status === 'complete' || status === 'rejected' || status === 'cancelled';
};

var toApiTrip = function(redisTrip) {
  redisTrip.creation = moment(redisTrip.creation);
  redisTrip.lastUpdate = moment(redisTrip.lastUpdate);
  if(redisTrip.pickupTime) redisTrip.pickupTime = moment(redisTrip.pickupTime);
  if(redisTrip.eta) redisTrip.eta = moment(redisTrip.eta);
  if(redisTrip.dropoffTime) redisTrip.dropoffTime = moment(redisTrip.dropoffTime);
  return redisTrip;
};

module.exports = new ActiveTrips();